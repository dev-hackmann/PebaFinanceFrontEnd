/* tslint:disable */
/* eslint-disable */
/**
 * Peba Finance API
 * API for finance management with income and expenses tracking
 *
 * The version of the OpenAPI document: v1
 * Contact: hackmann657@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthenticateUserQuery
 */
export interface AuthenticateUserQuery {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateUserQuery
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateUserQuery
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateExpenseCommand
 */
export interface CreateExpenseCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateExpenseCommand
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateExpenseCommand
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateExpenseCommand
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExpenseCommand
     */
    'category'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateIncomeCommand
 */
export interface CreateIncomeCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateIncomeCommand
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateIncomeCommand
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateIncomeCommand
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface ExpenseDto
 */
export interface ExpenseDto {
    /**
     * 
     * @type {number}
     * @memberof ExpenseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExpenseDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ExpenseDto
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExpenseDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExpenseDto
     */
    'category'?: string | null;
}
/**
 * 
 * @export
 * @interface IncomeDto
 */
export interface IncomeDto {
    /**
     * 
     * @type {number}
     * @memberof IncomeDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IncomeDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IncomeDto
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof IncomeDto
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * 
     * @type {number}
     * @memberof LoginResponseDto
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'token'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterUserCommand
 */
export interface RegisterUserCommand {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserCommand
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserCommand
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserCommand
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserCommand
     */
    'confirmPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface SummaryDto
 */
export interface SummaryDto {
    /**
     * 
     * @type {number}
     * @memberof SummaryDto
     */
    'totalIncome'?: number;
    /**
     * 
     * @type {number}
     * @memberof SummaryDto
     */
    'totalExpenses'?: number;
    /**
     * 
     * @type {number}
     * @memberof SummaryDto
     */
    'finalBalance'?: number;
    /**
     * 
     * @type {Array<SummaryExpensesByCategoryDto>}
     * @memberof SummaryDto
     */
    'summaryExpensesByCategory'?: Array<SummaryExpensesByCategoryDto> | null;
}
/**
 * 
 * @export
 * @interface SummaryExpensesByCategoryDto
 */
export interface SummaryExpensesByCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof SummaryExpensesByCategoryDto
     */
    'category'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SummaryExpensesByCategoryDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface UpdateExpenseCommand
 */
export interface UpdateExpenseCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateExpenseCommand
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateExpenseCommand
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateExpenseCommand
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExpenseCommand
     */
    'category'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateIncomeCommand
 */
export interface UpdateIncomeCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateIncomeCommand
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateIncomeCommand
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateIncomeCommand
     */
    'date'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticates a user and returns a JWT token.
         * @param {AuthenticateUserQuery} [authenticateUserQuery] The user login credentials.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost: async (authenticateUserQuery?: AuthenticateUserQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateUserQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Registers a new user.
         * @param {RegisterUserCommand} [registerUserCommand] The registration data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRegisterPost: async (registerUserCommand?: RegisterUserCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticates a user and returns a JWT token.
         * @param {AuthenticateUserQuery} [authenticateUserQuery] The user login credentials.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLoginPost(authenticateUserQuery?: AuthenticateUserQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLoginPost(authenticateUserQuery, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiV1AuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Registers a new user.
         * @param {RegisterUserCommand} [registerUserCommand] The registration data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthRegisterPost(registerUserCommand?: RegisterUserCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRegisterPost(registerUserCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiV1AuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticates a user and returns a JWT token.
         * @param {AuthenticateUserQuery} [authenticateUserQuery] The user login credentials.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginPost(authenticateUserQuery?: AuthenticateUserQuery, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDto> {
            return localVarFp.apiV1AuthLoginPost(authenticateUserQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Registers a new user.
         * @param {RegisterUserCommand} [registerUserCommand] The registration data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthRegisterPost(registerUserCommand?: RegisterUserCommand, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1AuthRegisterPost(registerUserCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Authenticates a user and returns a JWT token.
     * @param {AuthenticateUserQuery} [authenticateUserQuery] The user login credentials.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthLoginPost(authenticateUserQuery?: AuthenticateUserQuery, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiV1AuthLoginPost(authenticateUserQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Registers a new user.
     * @param {RegisterUserCommand} [registerUserCommand] The registration data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiV1AuthRegisterPost(registerUserCommand?: RegisterUserCommand, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiV1AuthRegisterPost(registerUserCommand, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExpenseApi - axios parameter creator
 * @export
 */
export const ExpenseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all expenses.
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesGet: async (description?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an expense.
         * @param {number} id The expense ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ExpensesIdDelete', 'id', id)
            const localVarPath = `/api/v1/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves an expense by ID.
         * @param {number} id The expense ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ExpensesIdGet', 'id', id)
            const localVarPath = `/api/v1/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing expense.
         * @param {number} id The expense ID.
         * @param {UpdateExpenseCommand} [updateExpenseCommand] The updated expense data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesIdPut: async (id: number, updateExpenseCommand?: UpdateExpenseCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ExpensesIdPut', 'id', id)
            const localVarPath = `/api/v1/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExpenseCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new expense.
         * @param {CreateExpenseCommand} [createExpenseCommand] The expense data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesPost: async (createExpenseCommand?: CreateExpenseCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExpenseCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves expenses for a specific month and year.
         * @param {number} year The year (2025).
         * @param {number} month The month (1-12).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesYearMonthGet: async (year: number, month: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiV1ExpensesYearMonthGet', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('apiV1ExpensesYearMonthGet', 'month', month)
            const localVarPath = `/api/v1/expenses/{year}/{month}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpenseApi - functional programming interface
 * @export
 */
export const ExpenseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpenseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all expenses.
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExpensesGet(description?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpenseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExpensesGet(description, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseApi.apiV1ExpensesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an expense.
         * @param {number} id The expense ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExpensesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExpensesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseApi.apiV1ExpensesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves an expense by ID.
         * @param {number} id The expense ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExpensesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExpensesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseApi.apiV1ExpensesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an existing expense.
         * @param {number} id The expense ID.
         * @param {UpdateExpenseCommand} [updateExpenseCommand] The updated expense data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExpensesIdPut(id: number, updateExpenseCommand?: UpdateExpenseCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExpensesIdPut(id, updateExpenseCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseApi.apiV1ExpensesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a new expense.
         * @param {CreateExpenseCommand} [createExpenseCommand] The expense data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExpensesPost(createExpenseCommand?: CreateExpenseCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExpensesPost(createExpenseCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseApi.apiV1ExpensesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves expenses for a specific month and year.
         * @param {number} year The year (2025).
         * @param {number} month The month (1-12).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExpensesYearMonthGet(year: number, month: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpenseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExpensesYearMonthGet(year, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseApi.apiV1ExpensesYearMonthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExpenseApi - factory interface
 * @export
 */
export const ExpenseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpenseApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all expenses.
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesGet(description?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ExpenseDto>> {
            return localVarFp.apiV1ExpensesGet(description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an expense.
         * @param {number} id The expense ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ExpensesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves an expense by ID.
         * @param {number} id The expense ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ExpenseDto> {
            return localVarFp.apiV1ExpensesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing expense.
         * @param {number} id The expense ID.
         * @param {UpdateExpenseCommand} [updateExpenseCommand] The updated expense data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesIdPut(id: number, updateExpenseCommand?: UpdateExpenseCommand, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ExpensesIdPut(id, updateExpenseCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new expense.
         * @param {CreateExpenseCommand} [createExpenseCommand] The expense data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesPost(createExpenseCommand?: CreateExpenseCommand, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.apiV1ExpensesPost(createExpenseCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves expenses for a specific month and year.
         * @param {number} year The year (2025).
         * @param {number} month The month (1-12).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExpensesYearMonthGet(year: number, month: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ExpenseDto>> {
            return localVarFp.apiV1ExpensesYearMonthGet(year, month, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExpenseApi - object-oriented interface
 * @export
 * @class ExpenseApi
 * @extends {BaseAPI}
 */
export class ExpenseApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all expenses.
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApi
     */
    public apiV1ExpensesGet(description?: string, options?: RawAxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).apiV1ExpensesGet(description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an expense.
     * @param {number} id The expense ID to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApi
     */
    public apiV1ExpensesIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).apiV1ExpensesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves an expense by ID.
     * @param {number} id The expense ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApi
     */
    public apiV1ExpensesIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).apiV1ExpensesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing expense.
     * @param {number} id The expense ID.
     * @param {UpdateExpenseCommand} [updateExpenseCommand] The updated expense data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApi
     */
    public apiV1ExpensesIdPut(id: number, updateExpenseCommand?: UpdateExpenseCommand, options?: RawAxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).apiV1ExpensesIdPut(id, updateExpenseCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new expense.
     * @param {CreateExpenseCommand} [createExpenseCommand] The expense data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApi
     */
    public apiV1ExpensesPost(createExpenseCommand?: CreateExpenseCommand, options?: RawAxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).apiV1ExpensesPost(createExpenseCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves expenses for a specific month and year.
     * @param {number} year The year (2025).
     * @param {number} month The month (1-12).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseApi
     */
    public apiV1ExpensesYearMonthGet(year: number, month: number, options?: RawAxiosRequestConfig) {
        return ExpenseApiFp(this.configuration).apiV1ExpensesYearMonthGet(year, month, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IncomeApi - axios parameter creator
 * @export
 */
export const IncomeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all income records.
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeGet: async (description?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/income`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an income record.
         * @param {number} id The income ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1IncomeIdDelete', 'id', id)
            const localVarPath = `/api/v1/income/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves an income record by ID.
         * @param {number} id The income ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1IncomeIdGet', 'id', id)
            const localVarPath = `/api/v1/income/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing income record.
         * @param {number} id The income ID.
         * @param {UpdateIncomeCommand} [updateIncomeCommand] The updated income data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeIdPut: async (id: number, updateIncomeCommand?: UpdateIncomeCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1IncomeIdPut', 'id', id)
            const localVarPath = `/api/v1/income/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateIncomeCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new income record.
         * @param {CreateIncomeCommand} [createIncomeCommand] The income data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomePost: async (createIncomeCommand?: CreateIncomeCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/income`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIncomeCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves income records for a specific month and year.
         * @param {number} year The year (2025).
         * @param {number} month The month (1-12).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeYearMonthGet: async (year: number, month: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiV1IncomeYearMonthGet', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('apiV1IncomeYearMonthGet', 'month', month)
            const localVarPath = `/api/v1/income/{year}/{month}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IncomeApi - functional programming interface
 * @export
 */
export const IncomeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IncomeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all income records.
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IncomeGet(description?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IncomeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IncomeGet(description, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomeApi.apiV1IncomeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes an income record.
         * @param {number} id The income ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IncomeIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IncomeIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomeApi.apiV1IncomeIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves an income record by ID.
         * @param {number} id The income ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IncomeIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IncomeIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomeApi.apiV1IncomeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates an existing income record.
         * @param {number} id The income ID.
         * @param {UpdateIncomeCommand} [updateIncomeCommand] The updated income data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IncomeIdPut(id: number, updateIncomeCommand?: UpdateIncomeCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IncomeIdPut(id, updateIncomeCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomeApi.apiV1IncomeIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Creates a new income record.
         * @param {CreateIncomeCommand} [createIncomeCommand] The income data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IncomePost(createIncomeCommand?: CreateIncomeCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IncomePost(createIncomeCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomeApi.apiV1IncomePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieves income records for a specific month and year.
         * @param {number} year The year (2025).
         * @param {number} month The month (1-12).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IncomeYearMonthGet(year: number, month: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpenseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IncomeYearMonthGet(year, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomeApi.apiV1IncomeYearMonthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IncomeApi - factory interface
 * @export
 */
export const IncomeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IncomeApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all income records.
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeGet(description?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<IncomeDto>> {
            return localVarFp.apiV1IncomeGet(description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an income record.
         * @param {number} id The income ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1IncomeIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves an income record by ID.
         * @param {number} id The income ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<IncomeDto> {
            return localVarFp.apiV1IncomeIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing income record.
         * @param {number} id The income ID.
         * @param {UpdateIncomeCommand} [updateIncomeCommand] The updated income data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeIdPut(id: number, updateIncomeCommand?: UpdateIncomeCommand, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1IncomeIdPut(id, updateIncomeCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new income record.
         * @param {CreateIncomeCommand} [createIncomeCommand] The income data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomePost(createIncomeCommand?: CreateIncomeCommand, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.apiV1IncomePost(createIncomeCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves income records for a specific month and year.
         * @param {number} year The year (2025).
         * @param {number} month The month (1-12).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IncomeYearMonthGet(year: number, month: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ExpenseDto>> {
            return localVarFp.apiV1IncomeYearMonthGet(year, month, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IncomeApi - object-oriented interface
 * @export
 * @class IncomeApi
 * @extends {BaseAPI}
 */
export class IncomeApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all income records.
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomeApi
     */
    public apiV1IncomeGet(description?: string, options?: RawAxiosRequestConfig) {
        return IncomeApiFp(this.configuration).apiV1IncomeGet(description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an income record.
     * @param {number} id The income ID to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomeApi
     */
    public apiV1IncomeIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return IncomeApiFp(this.configuration).apiV1IncomeIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves an income record by ID.
     * @param {number} id The income ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomeApi
     */
    public apiV1IncomeIdGet(id: number, options?: RawAxiosRequestConfig) {
        return IncomeApiFp(this.configuration).apiV1IncomeIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing income record.
     * @param {number} id The income ID.
     * @param {UpdateIncomeCommand} [updateIncomeCommand] The updated income data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomeApi
     */
    public apiV1IncomeIdPut(id: number, updateIncomeCommand?: UpdateIncomeCommand, options?: RawAxiosRequestConfig) {
        return IncomeApiFp(this.configuration).apiV1IncomeIdPut(id, updateIncomeCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new income record.
     * @param {CreateIncomeCommand} [createIncomeCommand] The income data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomeApi
     */
    public apiV1IncomePost(createIncomeCommand?: CreateIncomeCommand, options?: RawAxiosRequestConfig) {
        return IncomeApiFp(this.configuration).apiV1IncomePost(createIncomeCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves income records for a specific month and year.
     * @param {number} year The year (2025).
     * @param {number} month The month (1-12).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomeApi
     */
    public apiV1IncomeYearMonthGet(year: number, month: number, options?: RawAxiosRequestConfig) {
        return IncomeApiFp(this.configuration).apiV1IncomeYearMonthGet(year, month, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SummaryApi - axios parameter creator
 * @export
 */
export const SummaryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a financial summary for a specific month and year.
         * @param {number} year The year (2025).
         * @param {number} month The month (1-12).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SummaryYearMonthGet: async (year: number, month: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiV1SummaryYearMonthGet', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('apiV1SummaryYearMonthGet', 'month', month)
            const localVarPath = `/api/v1/summary/{year}/{month}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SummaryApi - functional programming interface
 * @export
 */
export const SummaryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SummaryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves a financial summary for a specific month and year.
         * @param {number} year The year (2025).
         * @param {number} month The month (1-12).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SummaryYearMonthGet(year: number, month: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SummaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SummaryYearMonthGet(year, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SummaryApi.apiV1SummaryYearMonthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SummaryApi - factory interface
 * @export
 */
export const SummaryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SummaryApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves a financial summary for a specific month and year.
         * @param {number} year The year (2025).
         * @param {number} month The month (1-12).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SummaryYearMonthGet(year: number, month: number, options?: RawAxiosRequestConfig): AxiosPromise<SummaryDto> {
            return localVarFp.apiV1SummaryYearMonthGet(year, month, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SummaryApi - object-oriented interface
 * @export
 * @class SummaryApi
 * @extends {BaseAPI}
 */
export class SummaryApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a financial summary for a specific month and year.
     * @param {number} year The year (2025).
     * @param {number} month The month (1-12).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummaryApi
     */
    public apiV1SummaryYearMonthGet(year: number, month: number, options?: RawAxiosRequestConfig) {
        return SummaryApiFp(this.configuration).apiV1SummaryYearMonthGet(year, month, options).then((request) => request(this.axios, this.basePath));
    }
}



